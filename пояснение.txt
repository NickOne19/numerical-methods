Этот код реализует численное решение задачи Коши для обыкновенных дифференциальных уравнений с помощью методов Рунге-Кутта. Разберем его части подробно.

### 1. **Файл `main.cpp`**

Этот файл содержит основную программу, которая считывает входные данные из файла, создает экземпляр класса `Solution` и вызывает метод для численного решения дифференциального уравнения.

#### Функции:
- `getSequence`: Разбивает строку на подстроки с помощью заданного разделителя (в данном случае, пробела). Возвращает вектор строк.
- `f`: Определяет функцию правой части дифференциального уравнения \( f(x, y) = x - \frac{y}{10} \).
- `main`: 
  1. Открывает файл `data.txt`, читает оттуда параметры задачи \( A \), \( B \), \( C \), \( y_0 \), минимальный шаг \( h_{\text{min}} \) и допустимую погрешность \( \varepsilon \).
  2. Создает объект класса `Solution` и вызывает метод `findAnswer` для нахождения численного решения.

### 2. **Файл `solution.cpp`**

Этот файл содержит реализацию класса `Solution`, который выполняет численное решение задачи с помощью методов Рунге-Кутта.

#### Вспомогательные функции:
- `isGoodCond`: Проверяет корректность начальных условий:
  - \( C \) должно быть равно либо \( A \), либо \( B \).
  - \( A \) должно быть меньше \( B \).
  Если условия не выполнены, возвращается ошибка `Error::ERROR2`.
- `findEps`: Вычисляет локальную погрешность между точным и приближенным значениями и записывает её в файл.
  
#### Класс `Solution`:
Класс хранит параметры задачи и реализует основной метод для её решения.

##### Конструктор:
- Инициализирует параметры задачи: \( A \), \( B \), \( C \), \( y_0 \) и функцию \( f \), а также переменные для подсчета шагов.

##### Метод `findAnswer`:
Этот метод реализует основной алгоритм решения:
  1. Открывает файл `rez.txt` для записи результатов.
  2. Проверяет начальные условия через `isGoodCond`. Если проверка не проходит, возвращается ошибка.
  3. Определяет направление численного интегрирования: вправо или влево (в зависимости от того, равен ли \( C \) \( A \) или \( B \)).
  4. В цикле выполняется интегрирование, пока шаг метода Рунге-Кутта не станет меньше минимального \( h_{\text{min}} \).
  5. В конце записываются финальные результаты и статистика: число шагов, количество плохих и минимальных шагов.

##### Метод `iteration`:
Этот метод выполняет одну итерацию интегрирования:
  1. Сначала пытается сделать шаг методом Рунге-Кутта с текущим шагом.
  2. Вычисляет локальную погрешность. Если погрешность больше допустимой, шаг уменьшается вдвое. Если погрешность меньше, шаг может быть увеличен.
  3. Если шаг уменьшается до минимального допустимого значения, то записывается это событие и возвращается результат с минимальным шагом.

##### Метод `findDirection`:
Возвращает направление интегрирования (вправо или влево) в зависимости от того, чему равно \( C \).

##### Метод `endMethodCompare`:
Возвращает величину, которая указывает, насколько близко текущая точка к концу интервала интегрирования \( [A, B] \).

### 3. **Пояснение к работе программы**

Программа решает задачу численного интегрирования дифференциального уравнения с использованием методов Рунге-Кутта 11-го порядка точности. Она использует разные методы для основного решения и приближенного (контроль точности).

Основные шаги:
1. Инициализация параметров из файла.
2. Проверка начальных условий.
3. Выполнение итераций по методу Рунге-Кутта, контроль погрешности.
4. Запись результата в файл.

Файлы, с которыми работает программа:
- `data.txt`: содержит входные параметры задачи (границы интервала, начальные условия, минимальный шаг и допустимую погрешность).
- `rez.txt`: содержит результаты численного интегрирования, включая локальные погрешности и количество шагов.

Этот подход с контролем точности и адаптивным шагом помогает обеспечить более точное решение задачи с минимальными вычислительными затратами.